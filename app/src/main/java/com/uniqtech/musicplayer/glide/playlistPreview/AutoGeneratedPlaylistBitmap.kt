/*
 * Copyright (c) 2024 Christians Mart√≠nez Alvarado
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.uniqtech.musicplayer.glide.playlistPreview

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import com.bumptech.glide.Glide
import com.bumptech.glide.load.resource.bitmap.RoundedCorners
import com.uniqtech.musicplayer.R
import com.uniqtech.musicplayer.extensions.media.albumCoverUri
import com.uniqtech.musicplayer.model.Song

object AutoGeneratedPlaylistBitmap {
    fun getBitmap(
        context: Context, songPlaylist: List<Song>?
    ): Bitmap? {
        if (songPlaylist.isNullOrEmpty()) return getDefaultBitmap(context)
        if (songPlaylist.size == 1) return getBitmapWithAlbumId(context, songPlaylist[0].albumId)
        val albumID: MutableList<Long> = ArrayList()
        for (song in songPlaylist) {
            if (!albumID.contains(song.albumId)) albumID.add(song.albumId)
        }
        val art: MutableList<Bitmap> = ArrayList()
        for (id in albumID) {
            val bitmap = getBitmapWithAlbumId(context, id)
            if (bitmap != null) art.add(bitmap)
            if (art.size == 9) break
        }
        return MergedImageUtils.joinImages(art)
    }

    private fun getBitmapWithAlbumId(context: Context, id: Long): Bitmap? {
        return try {
            Glide.with(context)
                .asBitmap()
                .transform(RoundedCorners(20))
                .load(id.albumCoverUri())
                .submit(200, 200)
                .get()
        } catch (e: Exception) {
            null
        }
    }

    private fun getDefaultBitmap(context: Context): Bitmap {
        return BitmapFactory.decodeResource(context.resources, R.drawable.default_audio_art)
    }
}